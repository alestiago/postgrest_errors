[
  {
    "name": "Group 0 - Connection",
    "description": "Related to the connection with the database.",
    "errors": [
      {
        "code": "000",
        "httpStatus": "503",
        "description": "Could not connect with the database due to an incorrect\ndb-uri or due to the PostgreSQL service not running."
      },
      {
        "code": "001",
        "httpStatus": "503",
        "description": "Could not connect with the database due to an internal\nerror."
      },
      {
        "code": "002",
        "httpStatus": "503",
        "description": "Could not connect with the database when building the\nSchema Cache\ndue to the PostgreSQL service not running."
      },
      {
        "code": "003",
        "httpStatus": "504",
        "description": "The request timed out waiting for a pool connection\nto be available. See db-pool-acquisition-timeout."
      }
    ]
  },
  {
    "name": "Group 1 - Api Request",
    "description": "Related to the HTTP request elements.",
    "errors": [
      {
        "code": "100",
        "httpStatus": "400",
        "description": "Parsing error in the query string parameter.\nSee Horizontal Filtering, Operators and Ordering."
      },
      {
        "code": "101",
        "httpStatus": "405",
        "description": "For functions, only GET and POST\nverbs are allowed. Any other verb will throw this error."
      },
      {
        "code": "102",
        "httpStatus": "400",
        "description": "An invalid request body was sent(e.g. an empty body or\nmalformed JSON)."
      },
      {
        "code": "103",
        "httpStatus": "416",
        "description": "An invalid range was specified for Limits and Pagination."
      },
      {
        "code": "105",
        "httpStatus": "405",
        "description": "An invalid PUT request was done"
      },
      {
        "code": "106",
        "httpStatus": "406",
        "description": "The schema specified when\nswitching schemas is not present\nin the db-schemas configuration variable."
      },
      {
        "code": "107",
        "httpStatus": "415",
        "description": "The Content-Type sent in the request is invalid."
      },
      {
        "code": "108",
        "httpStatus": "400",
        "description": "The filter is applied to a embedded resource that is not\nspecified in the select part of the query string.\nSee Embedded Filters."
      },
      {
        "code": "109",
        "httpStatus": "400",
        "description": "Restricting a Deletion or an Update using limits must\ninclude the ordering of a unique column.\nSee Limited Update/Delete."
      },
      {
        "code": "110",
        "httpStatus": "400",
        "description": "When restricting a Deletion or an Update using limits\nmodifies more rows than the maximum specified in the limit.\nSee Limited Update/Delete."
      },
      {
        "code": "111",
        "httpStatus": "500",
        "description": "An invalid response.headers was set.\nSee Response Headers."
      },
      {
        "code": "112",
        "httpStatus": "500",
        "description": "The status code must be a positive integer.\nSee Response Status Code."
      },
      {
        "code": "113",
        "httpStatus": "406",
        "description": "More than one column was returned for a scalar result.\nSee Scalar Function Response Format."
      },
      {
        "code": "114",
        "httpStatus": "400",
        "description": "For an UPSERT using PUT, when\nlimits and offsets are used."
      },
      {
        "code": "115",
        "httpStatus": "400",
        "description": "For an UPSERT using PUT, when the\nprimary key in the query string and the body are different."
      },
      {
        "code": "116",
        "httpStatus": "406",
        "description": "More than 1 or no items where returned when requesting\na singular response. See Singular or Plural."
      },
      {
        "code": "117",
        "httpStatus": "405",
        "description": "The HTTP verb used in the request in not supported."
      },
      {
        "code": "118",
        "httpStatus": "400",
        "description": "Could not order the result using the related table because\nthere is no many-to-one or one-to-one relationship between\nthem."
      },
      {
        "code": "119",
        "httpStatus": "400",
        "description": "Could not use the spread operator on the related table\nbecause there is no many-to-one or one-to-one relationship\nbetween them."
      },
      {
        "code": "120",
        "httpStatus": "400",
        "description": "An embedded resource can only be filtered using the\nis.null or not.is.null operators."
      }
    ]
  },
  {
    "name": "Group 2 - Schema Cache",
    "description": "Related to a stale schema cache. Most of the time, these errors are solved by reloading the schema cache.",
    "errors": [
      {
        "code": "200",
        "httpStatus": "400",
        "description": "Caused by stale foreign key relationships, otherwise any of\nthe embedding resources or the relationship itself may not\nexist in the database."
      },
      {
        "code": "201",
        "httpStatus": "300",
        "description": "An ambiguous embedding request was made.\nSee Foreign Key Joins on Multiple Foreign Key Relationships."
      },
      {
        "code": "202",
        "httpStatus": "404",
        "description": "Caused by a stale function signature, otherwise\nthe function may not exist in the database."
      },
      {
        "code": "203",
        "httpStatus": "300",
        "description": "Caused by requesting overloaded functions with the same\nargument names but different types, or by using a POST\nverb to request overloaded functions with a JSON or\nJSONB type unnamed parameter. The solution is to rename\nthe function or add/modify the names of the arguments."
      },
      {
        "code": "204",
        "httpStatus": "400",
        "description": "Caused when the column specified\nin the columns query parameter is not found."
      }
    ]
  },
  {
    "name": "Group 3 - JWT",
    "description": "Related to the authentication process using JWT. You can follow the Tutorial 1 - The Golden Key for an example on how to implement authentication and the Authentication page for more information on this process.",
    "errors": [
      {
        "code": "300",
        "httpStatus": "500",
        "description": "A JWT secret is missing from the\nconfiguration."
      },
      {
        "code": "301",
        "httpStatus": "401",
        "description": "Any error related to the verification of the JWT,\nwhich means that the JWT provided is invalid in some way."
      },
      {
        "code": "302",
        "httpStatus": "401",
        "description": "Attempted to do a request without\nauthentication when the anonymous role\nis disabled by not setting it in db-anon-role."
      }
    ]
  },
  {
    "name": "Group X - Internal",
    "description": "Internal errors. If you encounter any of these, you may have stumbled on a PostgREST bug, please open an issue and we’ll be glad to fix it.",
    "errors": [
      {
        "code": "X00",
        "httpStatus": "500",
        "description": "Internal errors related to the library used for connecting\nto the database."
      }
    ]
  }
]
